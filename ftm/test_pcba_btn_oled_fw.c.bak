#include <stdio.h>
#include <gtk/gtk.h>
#include <gtk/gtkprogressbar.h>




#include "usb.h"

#define BTN_TEST_TIMEOUT 5 //s

#define RESULT_PASS "<span foreground='black'>PASS</span>"
#define RESULT_FAILED "<span foreground='black'>FAIL</span>"
#define RESULT_EMPTY "<span foreground='black'> </span>"

static GtkLabel *label_btn_left_result = NULL;
static GtkLabel *label_btn_right_result = NULL;
static GtkLabel *label_oled_full_light = NULL;
static GtkLabel *label_oled_full_dark = NULL;
static GtkLabel *label_firmware_erase = NULL;

static GtkLabel *label_btn_left_item = NULL;
static GtkLabel *label_btn_right_item = NULL;
static GtkLabel *label_oled_full_lg_item = NULL;
static GtkLabel *label_oled_full_dk_item = NULL;
static GtkLabel *label_firmware_erase_item = NULL;
static GtkWidget *window;

static GdkColor red = {0, 0xffff, 0, 0};
static GdkColor green = {0, 0, 0xffff, 0};
static GdkColor blue = {0, 0, 0, 0xffff};
static GdkColor yellow = {0, 0xffff, 0xffff, 0};
static GdkColor cyan = {0, 0, 0xffff, 0xffff};

static GdkColor grey51;//grid
static GdkColor grey81;//item
static GdkColor LightSkyBlue2;

static GThread *g_thread = NULL;

static guint mCheckScreenTimer = 0;
static guint mTimer = 0;

static int is_in_test = 0;
static int time_out = 0;

static int hw_btn_left_test_ok = 0;
static int hw_btn_right_test_ok = 0;

static int screen_light_test_ok = 0;
static int screen_dark_test_ok = 0;

static GtkWidget *check_oled_dialog = NULL;
static GtkWidget *frimware_earse_dialog = NULL;

static void update_btn_test_show_info(int id, int result);
static void usb_msg_callback(int id, int result);


static void reset_test_state(void)
{
    printf("[%s:%s]\n", __FILE__, __func__);

    if (g_thread) {
		unregister_usb(&g_thread);
	}

    hw_btn_left_test_ok = 0;
    hw_btn_right_test_ok = 0;
    is_in_test = 0;
    mTimer = 0;
	mCheckScreenTimer = 0;
    time_out = 0;

	screen_light_test_ok = 0;
	screen_dark_test_ok = 0;
}

static int goto_erase_firmware(void) 
{
	int ret = usb_write("1Erase fw");
	if (ret < 0) {
        goto exit;
	}
	usb_wait_state_change();
/*
	printf("[%s:%s] dialog firware earse.. wait for device reply.\n", __FILE__, __func__);
    frimware_earse_dialog = gtk_message_dialog_new_with_markup(
            GTK_WINDOW(window), GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_NONE, "firware earse.. \nwait for device reply");
    gtk_window_set_position(GTK_WINDOW (frimware_earse_dialog), GTK_WIN_POS_CENTER);

    gtk_dialog_run(GTK_DIALOG(frimware_earse_dialog));
*/
exit:
	printf("[%s:%s] exit.\n", __FILE__, __func__);
	return 0;
}

static void gtk_message_dialog_oled_check(GtkWidget *dialog, gint result)
{
    printf("[%s:%s] RESULT:%d\n", __FILE__, __func__, result);

	if (dialog)
		gtk_widget_destroy(dialog);

    switch (result) {
		case GTK_RESPONSE_NONE:
        case GTK_RESPONSE_YES:
            update_btn_test_show_info(TEST_OLED_LIGHT, TEST_PASS);
            update_btn_test_show_info(TEST_OLED_DARK, TEST_PASS);
			Sleep(100*5);
			goto_erase_firmware();
            break;
        case GTK_RESPONSE_NO:
            update_btn_test_show_info(TEST_OLED_LIGHT, TEST_FAIL);
            update_btn_test_show_info(TEST_OLED_DARK, TEST_FAIL);
            break;
		default:
			printf("[%s:%s] RESPONSE err !\n", __FILE__, __func__);
			break;
    }
	reset_test_state();
}

static gboolean check_screen_test_time_out(gpointer* data)
{
    if (mCheckScreenTimer == 0) {
		printf("[%s:%s]  timer cancel return\n", __FILE__, __func__);
		goto destroy;
	}
        
    if (time_out++ == BTN_TEST_TIMEOUT -1) {
		printf("[%s:%s] gtk_widget_destroy \n", __FILE__, __func__);
		goto destroy;
    }

	char dis_buf[64] = {0};
	sprintf(dis_buf, "Does the screen display normal (%ds)?", BTN_TEST_TIMEOUT - time_out);
	printf("[%s:%s]  update dialog display :%d\n", __FILE__, __func__, dis_buf);
	gtk_message_dialog_set_markup(GTK_MESSAGE_DIALOG((GtkWidget *)data), dis_buf);
	return TRUE;

destroy:
	gtk_widget_destroy((GtkWidget *)data);
	return FALSE;
}

static void check_oled_test_result(void) 
{
    if (usb_write("test_screen_display") == 0) {
		check_oled_dialog = gtk_message_dialog_new_with_markup(
				GTK_WINDOW(window), GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE, "Does the screen display normal (0s)?");
		gtk_window_set_position(GTK_WINDOW (check_oled_dialog), GTK_WIN_POS_CENTER);

		if (time_out) 
			time_out = 0;
		
		//mCheckScreenTimer = g_timeout_add(1000, (GSourceFunc)check_screen_test_time_out, (void *)check_oled_dialog);
		gint ret = gtk_dialog_run(GTK_DIALOG(check_oled_dialog));
		printf("[%s:%s] check_oled_dialog exit: %d: %d:%d\n", __FILE__, __func__,ret, screen_light_test_ok,screen_dark_test_ok);
		check_oled_dialog = NULL;
		mCheckScreenTimer = 0;
		gtk_message_dialog_oled_check(check_oled_dialog, screen_light_test_ok ? GTK_RESPONSE_YES : GTK_RESPONSE_NO);
	}
}

static void gtk_message_dialog_close_cb(GtkWidget *widget)
{
    printf("[%s:%s]\n", __FILE__, __func__);

    mTimer = 0;
    gtk_widget_destroy(widget);
    if (hw_btn_left_test_ok && hw_btn_right_test_ok) {
        check_oled_test_result();
    }
    else {
        reset_test_state();
    }
}

static gboolean hw_btn_test_time_out(gpointer* data)
{
    printf("[%s:%s] %d\n", __FILE__, __func__, time_out);

    if (mTimer == 0) 
        return FALSE;

    if (time_out++ == BTN_TEST_TIMEOUT -1) {
        if (!hw_btn_left_test_ok)
            update_btn_test_show_info(TEST_HW_BTN_LEFT, TEST_FAIL);

        if (!hw_btn_right_test_ok)
            update_btn_test_show_info(TEST_HW_BTN_RIGHT, TEST_FAIL);

        if (!hw_btn_left_test_ok || !hw_btn_right_test_ok) {
            update_btn_test_show_info(TEST_OLED_LIGHT, TEST_FAIL);
            update_btn_test_show_info(TEST_OLED_DARK, TEST_FAIL);
        }

        printf("[%s:%s] 5s exit\n", __FILE__, __func__);
        gtk_message_dialog_close_cb((GtkWidget *)data);
        return FALSE;
    }

    char dis_buf[64] = {0};
    sprintf(dis_buf, "Please press hw button(Y/N): %ds", BTN_TEST_TIMEOUT - time_out);
    gtk_message_dialog_set_markup(GTK_MESSAGE_DIALOG((GtkWidget *)data), dis_buf);
    return TRUE;
}

static void callback_for_hw_btn_test(GtkWidget *wid, GtkWidget *win)
{
    if (!is_in_test) {
		if ((g_thread = register_usb_callback(usb_msg_callback)) == NULL) {
           printf("[%s:%s] g_thread create failed!\n", __FILE__, __func__);
		   GtkWidget *dialog = gtk_message_dialog_new_with_markup(
				   GTK_WINDOW(window), GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE, "Can not connect device USB !");
		   gtk_window_set_position(GTK_WINDOW (dialog), GTK_WIN_POS_CENTER);
		   gtk_message_dialog_oled_check(dialog, gtk_dialog_run(GTK_DIALOG(dialog)));
		   return;
		}

        if (usb_write("test_init") < 0) {
            return;
		}
		
        is_in_test = 1;
        update_btn_test_show_info(TEST_HW_BTN_LEFT, TEST_RESET);
        update_btn_test_show_info(TEST_HW_BTN_RIGHT, TEST_RESET);
        update_btn_test_show_info(TEST_OLED_LIGHT, TEST_RESET);
        update_btn_test_show_info(TEST_OLED_DARK, TEST_RESET);
		update_btn_test_show_info(TEST_FIRMWARE_ERASE, TEST_RESET);

        char dis_buf[64] = {0};
        sprintf(dis_buf, "Please press hw button(Y/N): %ds", BTN_TEST_TIMEOUT - time_out);
        GtkWidget *dialog = gtk_message_dialog_new_with_markup(
                GTK_WINDOW(win), GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_NONE, dis_buf);
        gtk_window_set_position(GTK_WINDOW (dialog), GTK_WIN_POS_CENTER);
        g_signal_connect_swapped(dialog, "response", G_CALLBACK(gtk_message_dialog_close_cb), dialog);

		if (time_out) 
			time_out = 0;
		
        mTimer = g_timeout_add(1000, (GSourceFunc)hw_btn_test_time_out, (void *)dialog);
        gtk_dialog_run(GTK_DIALOG(dialog));
    }
}

static void usb_msg_callback(int id, int result)
{
    printf("[%s:%s] %d,%d\n", __FILE__, __func__, id, result);

    if (is_in_test) {
        switch(id) {
            case TEST_HW_BTN_LEFT:
                update_btn_test_show_info(id, result);
                hw_btn_left_test_ok = (result == TEST_PASS);
                break;
				
            case TEST_HW_BTN_RIGHT:
                update_btn_test_show_info(id, result);
                hw_btn_right_test_ok = (result == TEST_PASS);
                break;
				
			case TEST_OLED_LIGHT:
			case TEST_OLED_DARK:
				printf("[%s:%s] TEST_OLED_LIGHT ok!\n", __FILE__, __func__);
				update_btn_test_show_info(id, result);
				screen_light_test_ok = (result == TEST_PASS);
				if (check_oled_dialog) {
				   printf("[%s:%s] gtk_widget_destroy check_oled_dialog start.\n", __FILE__, __func__);
				   gtk_widget_destroy(check_oled_dialog);
				   Sleep(100*10);
				   check_oled_dialog = NULL;
				   printf("[%s:%s] gtk_widget_destroy check_oled_dialog exit\n", __FILE__, __func__);
				}
				break;
			case TEST_FIRMWARE_ERASE:
				if (frimware_earse_dialog) {
					update_btn_test_show_info(id, result);
					printf("[%s:%s] gtk_widget_destroy frimware_earse_dialog start.\n", __FILE__, __func__);
					gtk_widget_destroy(frimware_earse_dialog);
					Sleep(100*10);
					printf("[%s:%s] gtk_widget_destroy frimware_earse_dialog exit.\n", __FILE__, __func__);
					frimware_earse_dialog = NULL;
				}
				break;
        }

        if (hw_btn_left_test_ok && hw_btn_right_test_ok && mTimer) {
            printf("[%s:%s] hw btn test ok!\n", __FILE__, __func__);
        }
    }
}

static void update_btn_test_show_info(int id, int result)
{
    char *disp = (result == 0 ? RESULT_PASS : (result == -1 ? RESULT_FAILED : RESULT_EMPTY));
    GdkColor *color = (result == 0 ? &green : (result == -1 ? &red : &grey51));

	printf("[%s:%s] enter\n", __FILE__, __func__);

    switch(id) {
        case TEST_HW_BTN_LEFT:
            gtk_widget_modify_bg(label_btn_left_result,GTK_STATE_NORMAL, color);
            gtk_label_set_markup(GTK_LABEL(label_btn_left_result), disp);
            break;
			
        case TEST_HW_BTN_RIGHT:
            gtk_widget_modify_bg(label_btn_right_result,GTK_STATE_NORMAL, color);
            gtk_label_set_markup(GTK_LABEL(label_btn_right_result),disp);
            break;
			
        case TEST_OLED_LIGHT:
            gtk_widget_modify_bg(label_oled_full_light,GTK_STATE_NORMAL, color);
            gtk_label_set_markup(GTK_LABEL(label_oled_full_light),disp);
            break;
			
        case TEST_OLED_DARK:
            gtk_widget_modify_bg(label_oled_full_dark,GTK_STATE_NORMAL, color);
            gtk_label_set_markup(GTK_LABEL(label_oled_full_dark),disp);
            break;
			
        case TEST_FIRMWARE_ERASE:
			printf("[%s:%s] label_firmware_erase TEST_FIRMWARE_ERASE\n", __FILE__, __func__);
            gtk_widget_modify_bg(label_firmware_erase,GTK_STATE_NORMAL, color);
            gtk_label_set_markup(GTK_LABEL(label_firmware_erase),disp);
            break;
    }
	
	printf("[%s:%s] exit\n", __FILE__, __func__);
}

#if 1
int main(int argc,char *argv[])
{
    gtk_init(&argc,&argv);
    GtkBuilder *builder = gtk_builder_new();
    if (!gtk_builder_add_from_file(builder,"builder.ui", NULL)) {
        printf("connot load builder.ui file!");
        return -1;
    }

    gdk_color_parse("grey51", &grey51);
    window = GTK_WIDGET(gtk_builder_get_object(builder,"window1"));
    GtkButton *button_start = GTK_BUTTON(gtk_builder_get_object(builder, "button_start"));
    g_signal_connect (button_start, "clicked", callback_for_hw_btn_test, (gpointer) window);

    // TEST_BTN LEFT 
    label_btn_left_item = GTK_LABEL(gtk_builder_get_object(builder, "label_test_item1"));
    label_btn_left_result = GTK_LABEL(gtk_builder_get_object(builder, "label_result1"));
    gtk_widget_modify_bg(label_btn_left_result,GTK_STATE_NORMAL, &grey51);
    gtk_label_set_markup(GTK_LABEL(label_btn_left_result),RESULT_EMPTY);

    // TEST_BTN RIGHT
    label_btn_right_item = GTK_LABEL(gtk_builder_get_object(builder, "label_test_item2"));
    label_btn_right_result = GTK_LABEL(gtk_builder_get_object(builder, "label_result2"));
    gtk_label_set_markup(GTK_LABEL(label_btn_right_result),RESULT_EMPTY);
    gtk_widget_modify_bg(label_btn_right_result,GTK_STATE_NORMAL, &grey51);

    // TEST_OLED_LIGHT
    label_oled_full_lg_item = GTK_LABEL(gtk_builder_get_object(builder, "label_test_item3"));
    //gtk_widget_modify_bg(label_oled_full_lg_item,GTK_STATE_NORMAL, &grey51);
    //gtk_label_set_markup(GTK_LABEL(label_oled_full_lg_item),RESULT_EMPTY);

    label_oled_full_light = GTK_LABEL(gtk_builder_get_object(builder, "label_result3"));
    gtk_label_set_markup(GTK_LABEL(label_oled_full_light),RESULT_EMPTY);
    gtk_widget_modify_bg(label_oled_full_light,GTK_STATE_NORMAL, &grey51);

    // TEST_OLED_DARK
    label_oled_full_dk_item = GTK_GRID(gtk_builder_get_object(builder, "label_test_item4"));
    //gtk_widget_modify_bg(label_oled_full_dk_item,GTK_STATE_NORMAL, &grey51);
    //gtk_label_set_markup(GTK_LABEL(label_oled_full_dk_item),RESULT_EMPTY);

    label_oled_full_dark= GTK_LABEL(gtk_builder_get_object(builder, "label_result4"));
    gtk_label_set_markup(GTK_LABEL(label_oled_full_dark),RESULT_EMPTY);
    gtk_widget_modify_bg(label_oled_full_dark,GTK_STATE_NORMAL, &grey51);

    // TEST_FIRMWARE_ERASE
    label_firmware_erase_item = GTK_LABEL(gtk_builder_get_object(builder, "label_test_item5"));
    //gtk_widget_modify_bg(label_firmware_erase_item,GTK_STATE_NORMAL, &grey51);
    //gtk_label_set_markup(GTK_LABEL(label_firmware_erase_item),RESULT_EMPTY);

    label_firmware_erase = GTK_LABEL(gtk_builder_get_object(builder, "label_result5"));
    gtk_label_set_markup(GTK_LABEL(label_firmware_erase),RESULT_EMPTY);
    gtk_widget_modify_bg(label_firmware_erase,GTK_STATE_NORMAL, &grey51);

    gtk_widget_show_all(window);
    gtk_main();
    return 0;
}
#endif
